1: 说说你对盒子模型的理解?
  标准盒子模型，是浏览器默认的盒子模型 一个块的总宽度= width + margin(左右) + padding(左右) + border(左右)
  IE 怪异盒子模型:  一个块的总宽度= width + margin(左右)（即width已经包含了padding和border值）


2: 谈谈你对BFC的理解
  BFC（Block Formatting Context），即块级格式化上下文，它是页面中的一块渲染区域，
    并且有一套属于自己的渲染规则：
    内部的盒子会在垂直方向上一个接一个的放置
    对于同一个BFC的俩个相邻的盒子的margin会发生重叠，与方向无关。
      margin值计算方法如下：
        a、全部都为正值，取最大者；
        b、不全是正值，则都取绝对值，然后用正值减去最大值；
        c、没有正值，则都取绝对值，然后用0减去最大值。
    每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此
    BFC的区域不会与float的元素区域重叠
    计算BFC的高度时，浮动子元素也参与计算
    BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然
    BFC目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素
    特点：
      1. 同一个 BFC 下外边距会发生折叠
      2. BFC 可以包含浮动的元素（清除浮动）
      3. BFC 可以阻止元素被浮动元素覆盖
    BFC 应用场景？
      可以包含浮动元素——清除内部浮动
      分属于不同的BFC时可以阻止margin重叠。属于同一个BFC的两个相邻Box的margin会发生重叠（塌陷），与方向无关。
      自适应两栏布局。

3: 元素水平垂直居中的方法有哪些？如果元素不定宽高呢？    
  利用定位+margin:auto 利用定位+margin:负值
  利用定位+transform table布局  flex布局 grid布局


     
5: 怎么理解回流跟重绘？什么场景下会触发？
  回流：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置  布局发生变化
    概念：当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流/重排。
    触发条件：
    页面的首次渲染
    浏览器的窗口大小发生变化
    元素的内容发生变化
    元素的尺寸或者位置发生变化
    元素的字体大小发生变化
    激活CSS伪类
    查询某些属性或者调用某些方法
    添加或者删除可见的DOM元素
  重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制 颜色 文本方向 阴影（外观发生改变）
    概念：当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是重绘。
    触发条件：
    color、background 相关属性：background-color、background-image 等
    outline 相关属性：outline-color、outline-width 、text-decoration
    border-radius、visibility、box-shadow
  避免：
    避免设置多层内联样式。
    如果需要设置动画效果，最好使用absolute或者fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素。
    避免使用CSS表达式（例如：calc()）。
  回流一定重绘，重绘不一定回流  
6: CSS如何画一个三角形？原理是什么
  border-style:solid;
  border-width: 0 50px 50px;
  border-color: transparent transparent #d9534f;
7: 让Chrome支持小于12px 的文字方式有哪些？区别？  
  zoom
  -webkit-transform:scale()
  -webkit-text-size-adjust:none
8: 清除浮动  
  1: <div style="clear:both"></div>
  2: 父元素  overflow：hidden
  3: 使用:after 伪元素
9: 请简述CSS的权重规则
　　一个行内样式+1000，一个id+100，一个属性选择器/class类/伪类选择器+10，一个元素名/伪对象选择器+1。  
10: position的值， relative和absolute分别是相对于谁进行定位的？
  relative：生成相对定位的元素，相对于其在普通流中的位置进行定位
11: 经常遇到的浏览器兼容性有哪些？如何解决？
　1. 浏览器默认的margin和padding不同
　2. IE6双边距bug
　3. 在ie6，ie7中元素高度超出自己设置高度。原因是IE8以前的浏览器中会给元素设置默认的行高的高度导致的
　4. min-height在IE6下不起作用
　5. 透明性IE用filter:Alpha(Opacity=60)，而其他主流浏览器用 opacity:0.6
　6. input边框问题，去掉input边框一般用border:none;就可以，但由于IE6在解析input样式时的BUG(优先级问题)，在IE6下无效  
12: flex属性 是 flex-grow、flex-shrink、flex-basis三个属性的缩写。
  flex-grow：定义项目的的放大比例； flex-shrink：定义项目的缩小比例；
13:
CSS3新特性：
  1.颜色：新增RGBA，HSLA模式 
  2. 文字阴影（text-shadow） 
  3. 边框： 圆角（border-radius）边框阴影： box-shadow 
  4. 盒子模型：box-sizing 
  5. 背景：background-size 设置背景图片的尺寸background-origin 设置背景图片的原点background-clip 设置背景图片的裁切区域，以”，”分隔可以设置多背景，用于自适应布局 
  6. 渐变：linear-gradient、radial-gradient 
  7. 过渡：transition，可实现动画 
  8. 自定义动画 
  9. 在CSS3中唯一引入的伪元素 ：selection. 
  10. 媒体查询，多栏布局 
  11. border-image 
  12. 2D转换：transform：translate(x，y) rotate(x，y) skew(x，y) scale(x，y) 
  13. 3D转换 
  14.新增选择器：属性选择器、伪类选择器、伪元素选择器。 
h5 新特性；
  1. 拖拽释放(Drag and drop) API 
  2. 语义化更好的内容标签（header,nav,footer,aside,article,section） 
  3. 音频、视频API(audio,video) 
  4. 画布(Canvas) API 
  5. 地理(Geolocation) API 
  6. 数据存储 localStorage、sessionStorage  
  7. 表单控件，calendar、date、time、email、url、search 


canvas:
  fillRect()：绘制一个填充的矩形
  strokeRect()：绘制一个矩形的边框
  clearRect()：在给定的矩形内清除指定的像素
  beginPath()：起始一条路径，或重置当前路径
  stroke()：绘制已定义的路径
  fill()：填充当前绘图（路径）
  fill()：填充当前绘图（路径）
  restore()                           返回之前保存过的路径状态和属性
  createEvent()         
  getContext()                   返回一个对象，指出访问绘图功能必要的API
  rect()                            创建矩形
  fillRect()                            绘制"被填充"的矩形
  strokeRect()                    绘制矩形（无填充）
  clip()                                    从原始画布剪切任意形状和尺寸的区域
  quadraticCurveTo()            创建二次贝塞尔曲线
  bezierCurveTo()            创建三次方贝塞尔曲线
  arc()                                    创建弧/曲线（用于创建圆形或部分圆）
  arcTo()                            创建两切线之间的弧/曲线
  fillText()                          在画布上绘制"被填充的"文本
  strokeText()                  在画布上绘制文本（无填充）
  measureText()            返回包含指定文本宽度的对象
  drawImage()                  向画布上绘制图像、画布或视频  chrome不支持
  

svg和canvas的区别：
  从时间上看：canvas是h5新增特性，svg被运用比较久远。
  从功能上看：svg每个图形都可以看作是一个对象，如果对象属性发生变化，浏览器可自动重现图形。根据变化自动改变变化部分即可。canvas图形如果绘制完成，不会再得到浏览器的关注。如果图形位置改变，浏览器需要重新绘制。
  从应用上比较：
  canvas依赖分辨率，svg不依赖分辨率。
  canvas支持事件处理器，svg不支持。
  canvas适用于大型渲染区域区域程序（比如谷歌地图），svg适用于图像密集型游戏。

css 声明一个变量

:root {
  --main-bg-color: brown;
}

element {
  background-color: var(--main-bg-color);
}


渐进增强（progressive enhancement）：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，
  再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。
优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。

区别： 
  优雅降级是从复杂的现状开始的，并试图减少用户体验的供给；而渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；
  降级（功能衰竭）意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带

CSS 选择器有哪些？
（1）id选择器（#myid）
（2）类选择器（.myclassname）
（3）标签选择器（div,h1,p）
（4）后代选择器（h1 p）
（5）相邻后代选择器（子）选择器（ul>li）
（6）兄弟选择器（li~a）
（7）相邻兄弟选择器（li+a）
（8）属性选择器（a[rel="external"]）
（9）伪类选择器（a:hover,li:nth-child）
（10）伪元素选择器（::before、::after）
（11）通配符选择器（*）

display:none 与 visibility:hidden 的区别
  Display:none 会让元素完全从渲染树中消失，渲染时不会占据任何空间；
  visibility:hidden不会让元素从渲染树中消失，渲染的元素还会占据相应的空间，只是内容不可见
  性能相关：修改常规文档流中元素的 display 通常会造成文档的重排，但是修改visibility属性只会造成本元素的重绘；

link和@import的区别
  link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。
  link 支持使用 Javascript 控制 DOM 去改变样式；而@import不支持。


