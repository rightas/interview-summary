父文件：
    <template>
    <div class="hello">
        <List :items="items" :size="40" :showNumber="10" />
    </div>
    </template>

    <script>
    import List from "./List";
    export default {
    name: "HelloWorld",
    components: {
        List
    },
    computed: {
        items() {
        // 模拟1w条数据，将内容填充
        return Array(10000)
            .fill("")
            .map((item, index) => {
            return {
                id: index,
                content: `列表数据内容${index}`
            };
            });
        // items:  要进行渲染的列表数据
        // size: 每一条数据的高度
        // showNumber: 每次渲染的数据条数（DOM个数）
        }
    },

    };
    </script>

子文件：
    <template>
    <div class="container" :style="{height: containerHeight}" @scroll="handleScroll" ref="container">
        <!-- 数据列表 -->
        <div class="list" :style="{top: listTop }">
        <!-- 列表项 -->
        <div v-for="item in showData" :key="item.id" :style="{height: size + 'px'}">{{item.content}}</div>
        <!-- 用于撑开高度的元素 -->
        <div class="bar" :style="{ height: barHeight }"></div>
        </div>
    </div>
    </template>

    <script>
    export default {
    name: "List",
    props: {
        // 渲染的数据
        items: {
        type: Array,
        required: true
        },
        // 每条数据渲染节点的高度
        size: {
        type: Number,
        required: true
        },
        // 每次渲染DOM节点个数
        showNumber: {
        type: Number,
        required: true
        }
    },
    data() {
        return {
        start: 0, // 要展示数据的起始下标
        end: this.showNumber // 要展示数据的结束下标
        };
    },
    computed: {
        // 最终筛选要展示的数据
        showData() {
        return this.items.slice(this.start, this.end);
        },
        // 容器的高度
        containerHeight() {
        return this.size * this.showNumber + "px";
        },
        // 撑开容器内容高度元素的高度
        barHeight() {
        return this.size * this.items.length + "px";
        },
        // 列表向上滚动改变top的值
        listTop() {
        return this.start * this.size + "px";
        }
    },
    methods: {
        //   容器的滚动事件
        handleScroll() {
        // 获取容器顶部滚动的尺寸
        const scrollTop = this.$refs.container.scrollTop;
        // 计算减去的数据条数， 用计算的结果作为获取数据的起始和结束下标
        // 起始的下标就是减去的数据条数， 向下取整
        this.start = Math.floor(scrollTop / this.size);
        // 结束的下标就是起始的下标加上要展示的数据条数
        this.end = this.start + this.showNumber;
        }
    }
    };
    </script>

    <style scoped>
    .container {
    overflow-y: scroll;
    background: pink;
    font-size: 20px;
    line-height: 40px;
    width: 300px;
    margin: 0 auto;
    position: relative;
    text-align: center;
    }
    .list {
    position: absolute;
    top: 0;
    width: 100%;
    }
    </style>
