ES6中数组新增了哪些扩展？
  1: 数组扩展运算符 ...
  2: 构造函数新增的方法 Array.from: 对象转换为数组 Array.of: 将一组值转换为对象
  3: 实例对象新增的方法 find findIndex fill  includes flat flatMap
  4: 空值处理
  5: sort()排序算法稳定性  有快排和插入排序
对象新增了哪些扩展？
  1: 属性的简写
  2: 属性名表达式
  3: super关键字
  4: 扩展运算符的应用
  5: 属性的遍历
  6: 对象新增的方法：object.is(): 严格模式判断两个值是否相等, 不同之处只有两个：一是+0不等于-0，二是NaN等于自身  
    object.assign() 对象的合并  object.getOwnPropertyDesriptors  返回制定对象所有自身属性的描述对象
    object.getPrototoypeOf() 读取一个对象的原型对象
数组新增了哪些扩展？
  1: 参数可以设置默认值 2:函数的length属性： 返回没有指定默认值的参数个数
  3: 箭头函数：
    函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象
    不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误
    不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替
    不可以使用yield命令，因此箭头函数不能用作 Generator 函数
你是怎么理解ES6新增Set、Map两种数据结构的？
  Set是一种叫做集合的数据结构，Map是一种叫做字典的数据结构
  Set；类似于数组 没有重复的值 方法 有 add delete  has clear
  Map：键和值都可以是任意类型 方法： set get has delete clear 
  WeakSet；没有遍历操作的API 和 没有size 属性
  WeakMap: 没有遍历操作的API 和 没有clear清空方法
你是怎么理解ES6中Proxy的？使用场景?
var proxy = new Proxy(targer, handler)
targer: 表示要拦截的目标对象  handler: 定义的操作
Reflect: 内部调用对象的默认行为，建议使用Reflect
  get(target,propKey,receiver)：拦截对象属性的读取
  set(target,propKey,value,receiver)：拦截对象属性的设置
  has(target,propKey)：拦截propKey in proxy的操作，返回一个布尔值
  deleteProperty(target,propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值
  ownKeys(target)：拦截Object.keys(proxy)、for...in等循环，返回一个数组
  getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象
  defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc），返回一个布尔值
  preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值
  getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象
  isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值
  setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值
  apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作
  construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作

var person = {
  name: "张三"
};

var proxy = new Proxy(person, {
  get: function(target, propKey) {
    return Reflect.get(target,propKey)
  }
});

proxy.name // "张三"










